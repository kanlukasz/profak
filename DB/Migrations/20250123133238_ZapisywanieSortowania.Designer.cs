// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProFak.DB;

#nullable disable

namespace ProFak.DB.Migrations
{
    [DbContext(typeof(Baza))]
    [Migration("20250123133238_ZapisywanieSortowania")]
    partial class ZapisywanieSortowania
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.36");

            modelBuilder.Entity("ProFak.DB.DeklaracjaVat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Miesiac")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Nalezny23")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Nalezny5")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Nalezny8")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("NaleznyWNT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("NaliczonyPozostale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("NaliczonyPrzeniesiony")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("NaliczonySrodkiTrwale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Netto0")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Netto23")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Netto5")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Netto8")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("NettoPozostale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("NettoSrodkiTrwale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("NettoWDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("NettoWNT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("NettoZW")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.ToTable("DeklaracjaVat", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.Faktura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CzyTP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("CzyWDT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("CzyWNT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("CzyWartosciReczne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("CzyZakupSrodkowTrwalych")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("DaneNabywcy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("DaneSprzedawcy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("DataKSeF")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataSprzedazy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataWprowadzenia")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataWystawienia")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DeklaracjaVatId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FakturaKorygowanaId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FakturaKorygujacaId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("KursWaluty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(1m);

                    b.Property<string>("NIPNabywcy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("NIPSprzedawcy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<int?>("NabywcaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NazwaNabywcy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("NazwaSprzedawcy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Numer")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("NumerKSeF")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("OpisSposobuPlatnosci")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("OpisZdarzenia")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<decimal>("ProcentKosztow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(100m);

                    b.Property<decimal>("ProcentVatNaliczonego")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(100m);

                    b.Property<string>("RachunekBankowy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<decimal>("RazemBrutto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("RazemNetto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("RazemVat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<int>("Rodzaj")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int?>("SposobPlatnosciId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SprzedawcaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TerminPlatnosci")
                        .HasColumnType("TEXT");

                    b.Property<string>("URLKSeF")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("UwagiPubliczne")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("UwagiWewnetrzne")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<int?>("WalutaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("XMLKSeF")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<int?>("ZaliczkaPitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeklaracjaVatId");

                    b.HasIndex("FakturaKorygowanaId");

                    b.HasIndex("FakturaKorygujacaId");

                    b.HasIndex("NabywcaId");

                    b.HasIndex("SposobPlatnosciId");

                    b.HasIndex("SprzedawcaId");

                    b.HasIndex("WalutaId");

                    b.HasIndex("ZaliczkaPitId");

                    b.ToTable("Faktura", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.JednostkaMiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CzyDomyslna")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("LiczbaMiescPoPrzecinku")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Skrot")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.ToTable("JednostkaMiary", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.KolumnaSpisu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kolejnosc")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Kolumna")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PoziomSortowania")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Spis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Szerokosc")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("KolumnaSpisu", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.Konfiguracja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EMailNadawca")
                        .HasColumnType("TEXT");

                    b.Property<string>("EMailTemat")
                        .HasColumnType("TEXT");

                    b.Property<string>("EMailTresc")
                        .HasColumnType("TEXT");

                    b.Property<string>("SMTPHaslo")
                        .HasColumnType("TEXT");

                    b.Property<string>("SMTPLogin")
                        .HasColumnType("TEXT");

                    b.Property<int>("SMTPPort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SMTPSerwer")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Konfiguracja", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EMailNadawca = "[SPRZEDAWCA-NAZWA] <[SPRZEDAWCA-EMAIL]>",
                            EMailTemat = "Faktura - [NUMER]",
                            EMailTresc = "Dzień dobry,\r\n\r\nw załączniku znajduje się faktura numer [NUMER] z dnia [DATA-SPRZEDAZY] na kwotę [KWOTA-BRUTTO] [WALUTA].\r\n\r\nWiadomość wygenerowana automatycznie.\r\n\r\n-- \r\n[SPRZEDAWCA-NAZWA]\r\n[SPRZEDAWCA-ADRES]",
                            SMTPHaslo = "tajnehaslo",
                            SMTPLogin = "biuro",
                            SMTPPort = 465,
                            SMTPSerwer = "smtp.example.com"
                        });
                });

            modelBuilder.Entity("ProFak.DB.Kontrahent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdresKorespondencyjny")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("AdresRejestrowy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<bool>("CzyArchiwalny")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("CzyPodmiot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("CzyTP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("EMail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<int?>("FormaOpodatkowania")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KodUrzedu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("NIP")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("OsobaFizycznaDataUrodzenia")
                        .HasColumnType("TEXT");

                    b.Property<string>("OsobaFizycznaImie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("OsobaFizycznaNazwisko")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("PelnaNazwa")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("RachunekBankowy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<int>("SrodowiskoKSeF")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Telefon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("TokenKSeF")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Uwagi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.ToTable("Kontrahent", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.Numerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Format")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<int>("Przeznaczenie")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Numerator", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.Plik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FakturaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<int>("Rozmiar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("ZawartoscId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FakturaId");

                    b.ToTable("Plik", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.PozycjaFaktury", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CenaBrutto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("CenaNetto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("CenaVat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<bool>("CzyPrzedKorekta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("CzyWartosciReczne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("CzyWedlugCenBrutto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("FakturaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GTU")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<decimal>("Ilosc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<int?>("JednostkaMiaryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<string>("Opis")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<decimal>("RabatCena")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("RabatProcent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("RabatWartosc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("StawkaRyczaltu")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StawkaVatId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TowarId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("WartoscBrutto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("WartoscNetto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("WartoscVat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("FakturaId");

                    b.HasIndex("JednostkaMiaryId");

                    b.HasIndex("StawkaVatId");

                    b.HasIndex("TowarId");

                    b.ToTable("PozycjaFaktury", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.SkladkaZus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Miesiac")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OdliczenieOdDochodu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PodstawaSpoleczne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PodstawaZdrowotne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("RozliczenieRoczneSkladkiZdrowotnej")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("SkladkaEmerytalna")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("SkladkaFunduszPracy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("SkladkaRentowa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("SkladkaSpoleczna")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("SkladkaWypadkowa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("SkladkaZdrowotna")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("SumaSkladek")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.ToTable("SkladkaZus", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.SposobPlatnosci", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CzyDomyslny")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("LiczbaDni")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.ToTable("SposobPlatnosci", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.StanMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CzyAktywna")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("CzyUkryta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("CzyZwinieta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Pozycja")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StanMenu", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.StanNumeratora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumeratorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OstatniaWartosc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Parametry")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex("NumeratorId");

                    b.ToTable("StanNumeratora", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.StawkaVat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CzyDomyslna")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Skrot")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<decimal>("Wartosc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.ToTable("StawkaVat", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.Towar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CenaBrutto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("CenaNetto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<bool>("CzyArchiwalny")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("CzyWedlugCenBrutto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("GTU")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int?>("JednostkaMiaryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<int>("Rodzaj")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<decimal?>("StawkaRyczaltu")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StawkaVatId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JednostkaMiaryId");

                    b.HasIndex("StawkaVatId");

                    b.ToTable("Towar", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.UrzadSkarbowy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UrzadSkarbowy", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.Waluta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CzyDomyslna")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("Skrot")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.ToTable("Waluta", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.Wplata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<int>("FakturaId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Kwota")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<string>("Uwagi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex("FakturaId");

                    b.ToTable("Wplata", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.ZaliczkaPit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DoPrzeniesienia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("DoWplaty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Koszty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("Miesiac")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Podatek")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Przeniesiony")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Przychody")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("SkladkiZus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.ToTable("ZaliczkaPit", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.Zawartosc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Dane")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int?>("PlikId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlikId")
                        .IsUnique();

                    b.ToTable("Zawartosc", (string)null);
                });

            modelBuilder.Entity("ProFak.DB.Faktura", b =>
                {
                    b.HasOne("ProFak.DB.DeklaracjaVat", "DeklaracjaVat")
                        .WithMany("Faktury")
                        .HasForeignKey("DeklaracjaVatId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProFak.DB.Faktura", "FakturaKorygowana")
                        .WithMany()
                        .HasForeignKey("FakturaKorygowanaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProFak.DB.Faktura", "FakturaKorygujaca")
                        .WithMany()
                        .HasForeignKey("FakturaKorygujacaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProFak.DB.Kontrahent", "Nabywca")
                        .WithMany()
                        .HasForeignKey("NabywcaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProFak.DB.SposobPlatnosci", "SposobPlatnosci")
                        .WithMany()
                        .HasForeignKey("SposobPlatnosciId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProFak.DB.Kontrahent", "Sprzedawca")
                        .WithMany()
                        .HasForeignKey("SprzedawcaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProFak.DB.Waluta", "Waluta")
                        .WithMany()
                        .HasForeignKey("WalutaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProFak.DB.ZaliczkaPit", "ZaliczkaPit")
                        .WithMany("Faktury")
                        .HasForeignKey("ZaliczkaPitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DeklaracjaVat");

                    b.Navigation("FakturaKorygowana");

                    b.Navigation("FakturaKorygujaca");

                    b.Navigation("Nabywca");

                    b.Navigation("SposobPlatnosci");

                    b.Navigation("Sprzedawca");

                    b.Navigation("Waluta");

                    b.Navigation("ZaliczkaPit");
                });

            modelBuilder.Entity("ProFak.DB.Plik", b =>
                {
                    b.HasOne("ProFak.DB.Faktura", "Faktura")
                        .WithMany("Pliki")
                        .HasForeignKey("FakturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faktura");
                });

            modelBuilder.Entity("ProFak.DB.PozycjaFaktury", b =>
                {
                    b.HasOne("ProFak.DB.Faktura", "Faktura")
                        .WithMany("Pozycje")
                        .HasForeignKey("FakturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProFak.DB.JednostkaMiary", "JednostkaMiary")
                        .WithMany()
                        .HasForeignKey("JednostkaMiaryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ProFak.DB.StawkaVat", "StawkaVat")
                        .WithMany()
                        .HasForeignKey("StawkaVatId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ProFak.DB.Towar", "Towar")
                        .WithMany()
                        .HasForeignKey("TowarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Faktura");

                    b.Navigation("JednostkaMiary");

                    b.Navigation("StawkaVat");

                    b.Navigation("Towar");
                });

            modelBuilder.Entity("ProFak.DB.StanNumeratora", b =>
                {
                    b.HasOne("ProFak.DB.Numerator", "Numerator")
                        .WithMany("Stany")
                        .HasForeignKey("NumeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Numerator");
                });

            modelBuilder.Entity("ProFak.DB.Towar", b =>
                {
                    b.HasOne("ProFak.DB.JednostkaMiary", "JednostkaMiary")
                        .WithMany()
                        .HasForeignKey("JednostkaMiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProFak.DB.StawkaVat", "StawkaVat")
                        .WithMany()
                        .HasForeignKey("StawkaVatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("JednostkaMiary");

                    b.Navigation("StawkaVat");
                });

            modelBuilder.Entity("ProFak.DB.Wplata", b =>
                {
                    b.HasOne("ProFak.DB.Faktura", "Faktura")
                        .WithMany("Wplaty")
                        .HasForeignKey("FakturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faktura");
                });

            modelBuilder.Entity("ProFak.DB.Zawartosc", b =>
                {
                    b.HasOne("ProFak.DB.Plik", "Plik")
                        .WithOne("Zawartosc")
                        .HasForeignKey("ProFak.DB.Zawartosc", "PlikId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Plik");
                });

            modelBuilder.Entity("ProFak.DB.DeklaracjaVat", b =>
                {
                    b.Navigation("Faktury");
                });

            modelBuilder.Entity("ProFak.DB.Faktura", b =>
                {
                    b.Navigation("Pliki");

                    b.Navigation("Pozycje");

                    b.Navigation("Wplaty");
                });

            modelBuilder.Entity("ProFak.DB.Numerator", b =>
                {
                    b.Navigation("Stany");
                });

            modelBuilder.Entity("ProFak.DB.Plik", b =>
                {
                    b.Navigation("Zawartosc");
                });

            modelBuilder.Entity("ProFak.DB.ZaliczkaPit", b =>
                {
                    b.Navigation("Faktury");
                });
#pragma warning restore 612, 618
        }
    }
}
